
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum HabitType {
  build
  break
}

enum Period {
  day
  week
  month
  custom
}

enum Unit {
  count
  minutes
  custom
}

enum Visibility {
  private
  household
  group
  public_link
}

enum Source {
  ui
  import
  webhook
  puller
  other
}

model User {
  id            String    @id @default(uuid())
  name          String
  color         String?
  timezone      String    @default("America/New_York")
  kioskMode     Boolean   @default(false)
  kioskPin      String?
  householdId   String?
  household     Household? @relation(fields: [householdId], references: [id])
  Habits        Habit[]
  Events        Event[]
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Household {
  id        String   @id @default(uuid())
  name      String
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("household")
}

model Habit {
  id              String     @id @default(uuid())
  ownerUserId     String?
  owner           User?      @relation(fields: [ownerUserId], references: [id])
  name            String
  emoji           String?
  type            HabitType
  target          Float
  period          Period
  scheduleDowMask Int?
  unit            Unit       @default(count)
  unitLabel       String?
  windowStart     String?
  windowEnd       String?
  templateKey     String?
  visibility      Visibility @default(private)
  active          Boolean    @default(true)
  events          Event[]
}

model Event {
  id       String   @id @default(uuid())
  habitId  String
  habit    Habit    @relation(fields: [habitId], references: [id])
  userId   String?
  user     User?    @relation(fields: [userId], references: [id])
  tsClient DateTime
  tsServer DateTime @default(now())
  value    Float    @default(1)
  note     String?
  source   Source   @default(ui)
  clientId String?
  meta     Json?

  @@index([habitId, tsServer])
  @@index([userId, tsServer])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
